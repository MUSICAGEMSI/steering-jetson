# =============================================================================
# CÓDIGO: UART COM ESP32 - JETSON → ESP32 → TB6600
# =============================================================================

import serial
import time
import json
import psutil
from datetime import datetime

class MotorControlUART:
    def __init__(self, port='/dev/ttyUSB0', baudrate=115200):
        self.port = port
        self.baudrate = baudrate
        self.ser = None
        
        # Métricas
        self.metrics = {
            'method': 'UART_ESP32',
            'start_time': None,
            'end_time': None,
            'total_time': 0,
            'cpu_usage': [],
            'movements': [],
            'communication_errors': 0,
            'latency': []
        }
        
        self.connect()
    
    def connect(self):
        try:
            self.ser = serial.Serial(self.port, self.baudrate, timeout=2)
            time.sleep(2)  # Aguarda ESP32 inicializar
            print(f"[UART] Conectado em {self.port}")
        except Exception as e:
            print(f"[UART] Erro de conexão: {e}")
            self.metrics['communication_errors'] += 1
    
    def send_angle(self, angle):
        if not self.ser or not self.ser.is_open:
            print("[UART] Conexão não estabelecida")
            return False
        
        try:
            # Mede latência de comunicação
            cmd_start = time.time()
            
            command = f"{angle}\n"
            self.ser.write(command.encode('utf-8'))
            
            # Aguarda confirmação (opcional - implementar no ESP32)
            # response = self.ser.readline().decode('utf-8').strip()
            
            latency = time.time() - cmd_start
            self.metrics['latency'].append(latency)
            
            return True
            
        except Exception as e:
            print(f"[UART] Erro de comunicação: {e}")
            self.metrics['communication_errors'] += 1
            return False
    
    def run_sequence(self, angles):
        print(f"[UART] Iniciando sequência: {angles}")
        self.metrics['start_time'] = datetime.now().isoformat()
        start_time = time.time()
        
        try:
            for i, angle in enumerate(angles):
                print(f"[UART] Movimento {i+1}: {angle}°")
                
                # Mede CPU e tempo do movimento
                cpu_before = psutil.cpu_percent(interval=0.1)
                move_start = time.time()
                
                success = self.send_angle(angle)
                
                if success:
                    # Aguarda movimento completar (estimativa)
                    estimated_time = abs(angle) * 0.01  # 0.01s por grau (ajustar)
                    time.sleep(max(estimated_time, 2))
                
                move_time = time.time() - move_start
                cpu_after = psutil.cpu_percent(interval=0.1)
                
                # Registra movimento
                self.metrics['movements'].append({
                    'degrees': angle,
                    'time': move_time,
                    'success': success
                })
                
                self.metrics['cpu_usage'].append((cpu_before + cpu_after) / 2)
                
        except Exception as e:
            print(f"[UART] Erro: {e}")
        
        finally:
            end_time = time.time()
            self.metrics['end_time'] = datetime.now().isoformat()
            self.metrics['total_time'] = end_time - start_time
            if self.ser:
                self.ser.close()
    
    def save_metrics(self, filename="uart_metrics.json"):
        with open(filename, 'w') as f:
            json.dump(self.metrics, f, indent=2)
        print(f"[UART] Métricas salvas em {filename}")
